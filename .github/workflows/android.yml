name: Android APK (arm64 debug)

on:
  # Bu workflow'u manuel olarak çalıştırmanı sağlar
  workflow_dispatch:
  
  # "main" branch'ine her kod gönderildiğinde otomatik çalışır
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Adım: Proje kodunu indirir
      - uses: actions/checkout@v4

      # 2. Adım: Android derlemesi için gerekli Java ortamını kurar
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 3. Adım: Flutter SDK'sını kurar
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      # ===============================================================
      # YENİ TEŞHİS ADIMLARI BURADA BAŞLIYOR
      # ===============================================================
      
      # 4. Adım (YENİ): Araç zinciri bilgilerini göster
      - name: Show toolchain info
        run: |
          which flutter || true
          which dart || true
          flutter --version
          dart --version
          echo "PATH=$PATH"

      # 5. Adım (YENİ): pubspec.yaml dosyasının içeriğini göster
      - name: Show pubspec.yaml
        run: |
          echo "----- pubspec.yaml -----"
          cat pubspec.yaml

      # 6. Adım (YENİ): main.dart dosyasının başını ve import'ları kontrol et
      - name: Show main.dart head + verify import
        run: |
          echo "----- lib/main.dart (1..80) -----"
          nl -ba lib/main.dart | sed -n '1,80p'
          echo "----- verify import -----"
          if ! grep -q "import 'package:flutter/material.dart';" lib/main.dart; then
            echo "::error title=Missing Flutter import::lib/main.dart başında material importu yok!"
            exit 1
          fi
          echo "Import OK"

      # 7. Adım (YENİ): Hata alınan satırların etrafındaki kodu göster
      - name: Show around reported lines
        run: |
          for L in 1677 1759 1922 1925; do
            echo "----- lib/main.dart (satır $L etrafı) -----"
            nl -ba lib/main.dart | sed -n "$((L-20)),$((L+20))p" || true
          done

      # ===============================================================
      # TEŞHİS ADIMLARI BİTTİ
      # ===============================================================

      # 8. Adım: Eğer reponda yoksa, Android proje dosyalarını oluşturur
      - name: Create Android folder if missing
        run: |
          if [ ! -d android ]; then
            flutter create . --platforms=android --org com.w3ruslan --project-name surplace_pos
          else
            echo "android/ already exists; skipping flutter create"
          fi
          
      # 9. Adım: Yazıcıya bağlanmak için gerekli internet iznini otomatik ekler
      - name: Add INTERNET permission
        run: |
          MANIFEST=android/app/src/main/AndroidManifest.xml
          grep -q 'android.permission.INTERNET' "$MANIFEST" || \
            sed -i 's#<application#<uses-permission android:name="android.permission.INTERNET" />\n    <application#' "$MANIFEST"
            
      # 10. Adım: Projenin bağımlılıklarını (paketlerini) indirir
      - name: Get dependencies
        run: flutter pub get
      
      # 11. Adım: Kodu derlemeden önce olası hataları kontrol eder
      - name: Analyze code
        run: flutter analyze
      
      # 12. Adım: Önceki derlemelerden kalan artıkları temizler
      - name: Clean project
        run: flutter clean
      
      # 13. Adım: APK dosyasını oluşturur
      - name: Build APK (verbose)
        run: flutter build apk --debug --target-platform=android-arm64 --no-shrink --verbose

      # 14. Adım: Oluşturulan APK dosyasını indirilebilmesi için kaydeder
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: build/app/outputs/flutter-apk/app-debug.apk
